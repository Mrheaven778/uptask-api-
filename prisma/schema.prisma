// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String   @id @default(uuid())
  email          String   @unique
  username       String?
  password       String
  isActivated    Boolean  @default(true)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  roles          String[] @default(["user"])
  project        Post[]   @relation("UserPosts")
  team           Post?    @relation("PostTeam", fields: [teamId], references: [id])
  teamId         String?
  completedTasks Task[]   @relation("UserTasks")
  notes          Note[]   @relation("UserNotes")
}

model Post {
  id         String   @id @default(uuid())
  title      String
  content    String
  clientName String
  tasks      Task[]   @relation("PostTasks")
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  manager    User     @relation("UserPosts", fields: [managerId], references: [id])
  managerId  String
  team       User[]   @relation("PostTeam")
}

enum TaskStatus {
  pending
  onHold
  inProgress
  underReview
  completed
}

model Task {
  id            String     @id @default(uuid())
  name          String
  description   String
  post          Post       @relation("PostTasks", fields: [postId], references: [id])
  postId        String
  taskStatus    TaskStatus @default(pending)
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  completedBy   User?      @relation("UserTasks", fields: [completedById], references: [id])
  completedById String?
  notes         Note[]     @relation("TasksNotes")
}

model Note {
  id          String   @id @default(uuid())
  content     String
  createdBy   User     @relation("UserNotes", fields: [createdById], references: [id])
  createdById String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  task        Task     @relation("TasksNotes", fields: [taskId], references: [id])
  taskId      String
}
